class Solution {
public:
    
    bool isleaf(Node * root)
    {
        if(root->left==NULL && root->right==NULL)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    void addleft(Node *root,vector<int>&res)
    {
        Node *curr=root->left;
        
        while(curr)
        {
            if(!isleaf(curr))
            {
                res.push_back(curr->data);
            }
            if(curr->left)
            {
                curr=curr->left;
            }
            else
            {
                curr=curr->right;
            }
 
        }
    }
   
   void addleaf(Node *root,vector<int>&res)
   {
       
       if(isleaf(root))
       {
           res.push_back(root->data);
           return ;
       }
       
       if(root->left){
           addleaf(root->left,res);
       }
       if(root->right)
       {
          addleaf(root->right,res); 
       }
       
   }
   
   void addright(Node *root,vector<int>&res)
   {
       vector<int> temp;
       
       Node*curr=root->right;
       
       while(curr)
       {
           if(!isleaf(curr))
           {
               temp.push_back(curr->data);
           }
           if(curr->right)
           {
               curr=curr->right;
           }
           else
           {
               curr=curr->left;
           }
           
       }
       
       for(int i=temp.size()-1;i>=0;i--)
       {
           res.push_back(temp[i]);
       }
       
       
   }


  
    vector <int> boundary(Node *root)
    {
        vector<int>res;
        
        if(root==NULL)
        {
            return res;
        }
        
        if(!isleaf(root))
        {
            res.push_back(root->data);
        }
        
        addleft(root,res);
        addleaf(root,res);
        addright(root,res);
        
        
        return res;
        
        
    }
};
